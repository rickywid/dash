{"version":3,"sources":["services/fetchReddit.js","components/subReddit.js","components/settingsTab.js","App.js","serviceWorker.js","index.js"],"names":["fetchReddit","subreddit","fetch","concat","then","response","json","myJson","data","children","subreddits","_this","this","promise","map","getSubreddit","Promise","all","library","add","faImage","faStar","faVideo","SubReddit","props","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","updatedSubs","setState","data2","key","isStickied","stickied","isGilded","gilded","react_default","a","createElement","react_fontawesome_index_es","className","icon","isImage","link_flair_text","isVideo","is_video","href","url","target","title","author","moment","created_utc","fromNow","permalink","num_comments","_this$props","id","displayLinks","Component","faCog","faPlus","faCheck","faTimes","SettingsTab","isOpen","e","updatedSubsCopy","name","value","push","_this2","splice","updateSubs","_this3","placeholder","onChange","handleChange","bind","onClick","deleteInput","_this4","displayInput","addInput","saveSubs","openSettings","nextProps","prevProps","App","assertThisInitialized","addSubReddit","updateSubReddit","subredditsData","showInitialSetup","JSON","parse","localStorage","getItem","getData","subs","type","length","removeItem","setItem","stringify","index","prevState","objectSpread","subReddit","_this5","item","settingsTab","displaySubs","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.410cdcdc.chunk.js","sourcesContent":["export default class fetchReddit {\n\n\tgetSubreddit(subreddit){\n\t\treturn fetch(`https://www.reddit.com/r/${subreddit}.json`)\n\t\t  .then(function(response) {\n\t\t    return response.json();\n\t\t  })\n\t\t  .then(function(myJson) {\n\t\t    return myJson.data.children;\n\t\t  });\n\t}\n\n\tgetData(subreddits){\n\t\tlet promise = subreddits.map(subreddit=>{\n\t\t\treturn this.getSubreddit(subreddit);\n\t\t});\t\n\n\t    return Promise.all(promise).then(data=>{\n\t    \t\treturn data;\n\t    })\n\t}\n}","import React, { Component } from 'react';\nimport moment from 'moment';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faImage, faStar, faVideo } from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faImage, faStar, faVideo);\n\nclass SubReddit extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      updatedSubs: []\n    }\n  }\n\n  componentDidMount() {\n    this.setState({ updatedSubs: this.props.data2})\n  }\n    \n  displayLinks(data, key) {\n\n    const isStickied = data.data.stickied ? 'stickied' : '';\n    const isGilded = data.data.gilded > 0 ? <FontAwesomeIcon className=\"icon-link icon--star\" icon=\"star\" /> : '';\n    const isImage = data.data.link_flair_text === \"image\" || data.data.link_flair_text === \"Picture\" ? <FontAwesomeIcon className=\"icon-link icon--image\" icon=\"image\" /> : '';\n    const isVideo = data.data.is_video === true ? <FontAwesomeIcon className=\"icon-link icon--video\" icon=\"video\" /> : '';\n\n    return (\n      <li key={key} className=\"subreddit-topic\">\n        <a className={`subreddit-topic__link ${isStickied}`} href={data.data.url} target=\"_blank\">{data.data.title}</a>\n        <small> by <a href={`https://reddit.com/u/${data.data.author}`}>{data.data.author}</a> </small>\n        <small>{moment(data.data.created_utc * 1000).fromNow()}</small>\n        <small> <a href={`https://reddit.com${data.data.permalink}`}>{data.data.num_comments} comments</a></small>\n        {isGilded}\n        {isImage}\n        {isVideo}\n      </li>\n    )\n  }\n\n  render() {\n\n    const { data, id } = this.props;\n\n    if(!this.props.data) {\n      return <div>loading</div>\n    }\n\n    return (\n      <div className=\"subreddit\">\n        <a className=\"subreddit-title\" href={`https://reddit.com/${data[0].data.permalink}`}>\n          <h2>r/{data[0].data.subreddit}</h2>\n        </a>\n        <ul className=\"subreddit-topics\">{data.map(this.displayLinks)}</ul>\n      </div>\n    );\n  }\n}\n\nexport default SubReddit;\n","import React, { Component } from 'react';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCog, faPlus, faCheck, faTimes } from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faCog, faPlus, faCheck, faTimes);\n\n\nclass SettingsTab extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      updatedSubs: [],\n      isOpen: false\n    }\n  }\n\n  componentDidMount() {\n    this.setState({ updatedSubs: this.props.subreddits});\n  }\n\n  static getDerivedStateFromProps(nextProps, prevProps) {\n    return { updatedSubs: nextProps.subreddits }\n  }\n\n  openSettings() {\n    this.setState({ \n      isOpen: !this.state.isOpen \n    });\n  }\n\n  handleChange(e) {\n    let updatedSubsCopy = this.state.updatedSubs;\n    updatedSubsCopy[e.target.name] = e.target.value;\n\n    this.setState({ updatedSubs: updatedSubsCopy}, ()=>{\n    })\n  }\n\n  addInput() {\n    let updatedSubsCopy = this.state.updatedSubs;\n    updatedSubsCopy.push(\"\");\n\n    this.setState({ updatedSubs: updatedSubsCopy});\n  }\n\n  deleteInput(id) {\n    let updatedSubsCopy = this.state.updatedSubs;\n    updatedSubsCopy.splice(id, 1);\n\n    this.setState({ updatedSubs: updatedSubsCopy}, ()=> this.props.updateSubs(this.state.updatedSubs, 'delete'));    \n  }\n\n  displayInput(subreddit, key) {\n    return (\n      <div className=\"new-sub__wrap\" key={key}>\n        <label className=\"new-sub__label\" >r/\n          <input className=\"new-sub__input\" name={key} value={this.state.updatedSubs[key]} placeholder=\"subreddit\" onChange={this.handleChange.bind(this)}/>\n        </label>\n        <FontAwesomeIcon onClick={()=>this.deleteInput(key)} className=\"icon icon--remove\" icon=\"times\" />\n      </div>\n    )\n  }\n\n  saveSubs() {\n    this.setState({ isOpen: false });\n    this.props.updateSubs(this.state.updatedSubs, 'add');\n  }\n\n  render() {\n    if(this.state.isOpen) {\n      return (\n        <div className=\"new-sub\">\n          {this.state.updatedSubs.map(this.displayInput.bind(this))}\n          <button className=\"btn btn--add\" onClick={this.addInput.bind(this)}><FontAwesomeIcon className=\"icon icon--add\" icon=\"plus\" /></button>\n          <button className=\"btn btn--save\" onClick={()=>this.saveSubs()}><FontAwesomeIcon className=\"icon icon--save\" icon=\"check\" /></button>\n          <button className=\"btn btn--close\" onClick={()=>this.openSettings()}>close</button>\n        </div>\n      );      \n    } else {\n      return <button className=\"settings-btn\" onClick={()=>this.openSettings()}><FontAwesomeIcon className=\"icon icon--cog\" icon=\"cog\" />Settings</button>\n    }\n  }\n}\n\nexport default SettingsTab;\n","import React, { Component } from 'react';\nimport fetchReddit from './services/fetchReddit';\nimport SubReddit from './components/subReddit';\nimport SettingsTab from './components/settingsTab';\nimport './App.scss';\n\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTimes } from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faTimes);\n\nclass App extends Component {\n\n  constructor() {\n    super();\n\n    this.handleChange = this.handleChange.bind(this);\n    this.addSubReddit = this.addSubReddit.bind(this);\n    this.updateSubReddit = this.updateSubReddit.bind(this);\n\n    this.state = {\n      subreddits: [''],\n      subredditsData: [],\n      showInitialSetup: true\n    }\n  }\n\n  componentDidMount() {\n\n    // if there is already saved data in local storage, bypass initial screen\n    // if local storage is empty or not items set then show initial screen\n    if(JSON.parse(localStorage.getItem(\"subreddits\")) !== null) {\n\n      this.setState({ showInitialSetup: false }, ()=>this.getData());\n\n    };\n  }\n\n  async getData() {\n\n    const subs = JSON.parse(localStorage.getItem(\"subreddits\"));\n    const fetch = new fetchReddit();\n    const data = await fetch.getData(subs);\n\n    this.setState({ subredditsData: data });\n  }\n\n  updateSubReddit(subreddits, type) {\n    \n    // if local storage is empty, show initial screen & reset state\n    if(type === 'delete' && subreddits.length === 0) {\n        \n      localStorage.removeItem(\"subreddits\");\n      \n      this.setState({ \n        showInitialSetup: true, \n        subreddits: [\"\"] \n      });\n    \n    return;\n    \n    } \n\n    // if there is local storage has data then update local storage and fetch data\n    localStorage.setItem(\"subreddits\", JSON.stringify(subreddits));\n\n    this.setState({ \n      showInitialSetup: false \n    }, () => {\n      this.getData(JSON.parse(localStorage.getItem(\"subreddits\")));\n    });\n  }\n\n  handleChange(e) {\n\n    const index = e.target.name;\n    const value = e.target.value;\n\n    this.setState( prevState => {\n      \n      const state = { ...prevState };\n\n      state['subreddits'][index] = value;\n\n      return state;\n    })\n  }\n\n  addSubReddit() {\n\n    this.setState( prevState => {\n\n      const state = { ...prevState };\n\n      state['subreddits'] = state['subreddits'].concat(['']);      \n\n      return state;\n    })\n  }\n\n  displaySubs() {\n    return JSON.parse(localStorage.getItem(\"subreddits\")).map((subreddit, key)=>{\n      return <SubReddit \n                key={key} \n                id={key}\n                data={this.state.subredditsData[key]} \n                data2={JSON.parse(localStorage.getItem(\"subreddits\"))}\n            />\n    })    \n  }\n\n  render() {\n    if(this.state.showInitialSetup) {\n      return (\n        <div className=\"start\">\n          <div className=\"start__content\">\n            <h2>Start adding some of your favourite subreddits</h2>\n            {(this.state.subreddits).map((item, key)=>{\n              return (\n                <div className=\"start__newsub\">\n                  <label className=\"new-sub__label\" >r/\n                    <input  name={key} \n                            className=\"new-sub__input new-sub__input--start\" \n                            onChange={this.handleChange} \n                            value={this.state.subreddits[key]} \n                    />\n                  </label>\n                </div>\n              )\n            })}\n            <div className=\"button-wrap\">\n              <button className=\"btn btn--add\" \n                      onClick={this.addSubReddit}\n              >\n                      <FontAwesomeIcon className=\"icon icon--add\" icon=\"plus\" />\n              </button>\n              <button className=\"btn btn--save\" \n                      onClick={()=>this.updateSubReddit(this.state.subreddits, 'add')}\n              >\n                      <FontAwesomeIcon className=\"icon icon--save\" icon=\"check\" />\n              </button>\n            </div>\n          </div>\n        </div>\n      )\n    }\n    return (\n      <div className=\"App\">\n        <nav>\n          <SettingsTab  subreddits={JSON.parse(localStorage.getItem(\"subreddits\"))} \n                        updateSubs={this.updateSubReddit}\n          />\n        </nav>\n        <div className=\"subreddit-wrap\">\n          {this.displaySubs()}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import './App.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}